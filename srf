#!/usr/bin/env python3

import argparse
import fnmatch
import gzip
import json
import os.path

def sarif_stat(args):
    with open(args.input) as fh:
        sarif_data = fh.read()
        sarif_file = json.loads(sarif_data)

    print('File Size:', os.path.getsize(args.input))

    # It's often useful to know the "upload size", since GitHub will block uploads that are "too large."
    print('Upload Size:', len(gzip.compress(sarif_data.encode('utf-8'))))

    print('Runs:', len(sarif_file['runs']))
    print('Results:', len([x for run in sarif_file['runs'] for x in run['results']]))

def sarif_head(args):
    with open(args.input) as fh:
        sarif_file = json.loads(fh.read())

    # FIXME: This does not work if len(runs) > 1.
    for run in sarif_file['runs']:
        for result in run['results']:
            run['results'] = run['results'][:args.n]

    print(json.dumps(sarif_file))

def sarif_grep(args):
    with open(args.input) as fh:
        sarif_file = json.loads(fh.read())

    for run in sarif_file['runs']:
        for result in run['results'][:]:
            for location in result['locations']:
                filepath = location['physicalLocation']['artifactLocation']['uri']
                if args.invert == fnmatch.fnmatchcase(filepath, args.pattern):
                    run['results'].remove(result)
                    break

    print(json.dumps(sarif_file))

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    parser_grep = subparsers.add_parser('grep', help='filter the results based on matching file paths.')
    parser_grep.add_argument('-v', dest='invert', action='store_true', help='negate match; invert results.')
    parser_grep.add_argument('pattern')
    parser_grep.add_argument('input', metavar='sarif')
    parser_grep.set_defaults(func=sarif_grep)

    parser_head = subparsers.add_parser('head', help='limit the SARIF file to the first N results (default: 25).')
    parser_head.add_argument('-n', default=25, type=int, required=False, help='number of results to keep.')
    parser_head.add_argument('input', metavar='sarif')
    parser_head.set_defaults(func=sarif_head)

    parser_stat = subparsers.add_parser('stat', help='output information about the SARIF file.')
    parser_stat.add_argument('input', metavar='sarif')
    parser_stat.set_defaults(func=sarif_stat)

    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()
