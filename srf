#!/usr/bin/env python

import argparse
import fnmatch
import json
import os.path

def sarif_stat(args):
    print('Size: {}'.format(os.path.getsize(args.input)))

    with open(args.input) as fh:
        sarif_file = json.loads(fh.read())

    print('Results: {}'.format(
        len([x for run in sarif_file['runs'] for x in run['results']])
    ))

def sarif_head(args):
    with open(args.input) as fh:
        sarif_file = json.loads(fh.read())

    for run in sarif_file['runs']:
        for result in run['results']:
            run['results'] = run['results'][:args.n]

    print(json.dumps(sarif_file))

def sarif_grep(args):
    with open(args.input) as fh:
        sarif_file = json.loads(fh.read())

    for run in sarif_file['runs']:
        for result in run['results'][:]:
            for location in result['locations']:
                filepath = location['physicalLocation']['artifactLocation']['uri']
                if args.invert == fnmatch.fnmatchcase(filepath, args.pattern):
                    run['results'].remove(result)
                    break

    print(json.dumps(sarif_file))

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    parser_grep = subparsers.add_parser('grep', help='Filter SARIF results based on file paths using glob-style pattern-matching.')
    parser_grep.add_argument('-v', dest='invert', action='store_true', help='negate match; invert results.')
    parser_grep.add_argument('pattern')
    parser_grep.add_argument('input', metavar='sarif')
    parser_grep.set_defaults(func=sarif_grep)

    parser_head = subparsers.add_parser('head', help='Reduce the SARIF file to the first N [25] results.')
    parser_head.add_argument('-n', default=25, type=int, required=False)
    parser_head.add_argument('input', metavar='sarif')
    parser_head.set_defaults(func=sarif_head)

    parser_stat = subparsers.add_parser('stat', help='Get information about SARIF file.')
    parser_stat.add_argument('input', metavar='sarif')
    parser_stat.set_defaults(func=sarif_stat)

    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()
